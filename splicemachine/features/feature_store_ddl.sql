CREATE SCHEMA IF NOT EXISTS FeatureStore;

-- TODO: Add unique indexes for unique items and any other access related indexes as needed.

DROP TABLE IF EXISTS FeatureStore.feature_set;
CREATE TABLE FeatureStore.feature_set
(
   feature_set_id      INTEGER PRIMARY KEY GENERATED BY DEFAULT AS IDENTITY,
   schema_name         VARCHAR(128),
   table_name          VARCHAR(128),
   description         VARCHAR(500),
   last_update_ts      TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
   last_update_username VARCHAR(128) DEFAULT CURRENT_USER,
   deployed            BOOLEAN
);

DROP TABLE IF EXISTS FeatureStore.feature_set_key;
CREATE TABLE FeatureStore.feature_set_key
(
    feature_set_id INTEGER,
    key_column_name VARCHAR(128),
    key_column_data_type VARCHAR(128),
    last_update_ts   TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    last_update_username VARCHAR(128) DEFAULT CURRENT_USER,
    PRIMARY KEY (feature_set_id, key_column_name)
);



DROP TABLE IF EXISTS FeatureStore.feature;
CREATE TABLE FeatureStore.feature
(
   feature_id        INTEGER PRIMARY KEY GENERATED BY DEFAULT AS IDENTITY,
   feature_set_id     INTEGER,
   name             VARCHAR(128),
   description      VARCHAR(500),
   feature_data_type  VARCHAR(255),
   feature_type      CHAR(1),  -- 'O'rdinal, 'C'ontinuous, 'N'ominal
   cardinality      INTEGER, -- number of distint values, -1 if undefined
   tags             VARCHAR(5000),
   compliance_level  INTEGER,
   last_update_ts     TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
   last_update_username VARCHAR(128) DEFAULT CURRENT_USER
);

CREATE UNIQUE INDEX FeatureStore.unique_feature_name ON FeatureStore.feature(name);

DROP TABLE IF EXISTS FeatureStore.training_context;
CREATE TABLE FeatureStore.training_context
(
    context_id INTEGER PRIMARY KEY GENERATED BY DEFAULT AS IDENTITY,
    name      VARCHAR(128) NOT NULL,
    description VARCHAR(500),
    sql_text CLOB(10000000),
    ts_column VARCHAR(128) NOT NULL,
    label_column VARCHAR(128),
    last_update_ts     TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    last_update_username VARCHAR(128) DEFAULT CURRENT_USER
);
CREATE UNIQUE INDEX FeatureStore.unique_training_context_name ON FeatureStore.training_context( name);

DROP TABLE IF EXISTS FeatureStore.training_context_key;
CREATE TABLE FeatureStore.training_context_key
(
    context_id INTEGER,
    key_column_name VARCHAR(128),
    key_type CHAR(1), -- 'P'rimary key, 'C'ontext key
    last_update_ts TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    last_update_username VARCHAR(128) DEFAULT CURRENT_USER,
    PRIMARY KEY (context_id,key_column_name, key_type)
);



DROP TABLE IF EXISTS FeatureStore.training_set;
CREATE TABLE FeatureStore.training_set
(
    training_set_id INTEGER PRIMARY KEY GENERATED BY DEFAULT AS IDENTITY,
    name VARCHAR(255),
    context_id INTEGER,
    last_update_ts TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    last_update_username VARCHAR(128) DEFAULT CURRENT_USER
);

DROP TABLE IF EXISTS FeatureStore.training_set_feature;
CREATE TABLE FeatureStore.training_set_feature
(
    training_set_id INTEGER,
    feature_id INTEGER,
    last_update_ts TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    last_update_username VARCHAR(128) DEFAULT CURRENT_USER,
    PRIMARY KEY(training_set_id, feature_id)
);

DROP TABLE IF EXISTS FeatureStore.training_set_feature_stats;
CREATE TABLE FeatureStore.training_set_feature_stats
(
    training_set_id INTEGER,
    feature_id INTEGER,
    training_set_start_ts TIMESTAMP,
    training_set_end_ts TIMESTAMP,
    feature_cardinality INTEGER,
    feature_histogram CLOB,
    feature_mean DOUBLE,
    feature_median DOUBLE,
    feature_count INTEGER,
    feature_stddev DOUBLE,
    last_update_ts TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    last_update_username VARCHAR(128) DEFAULT CURRENT_USER,
    PRIMARY KEY(training_set_id, feature_id, training_set_start_ts, training_set_end_ts)
);


DROP TABLE IF EXISTS FeatureStore.deployment;
CREATE TABLE FeatureStore.deployment
(
    model_schema_name VARCHAR(128),
    model_table_name VARCHAR(128),
    training_set_id INTEGER,
    training_set_start_ts TIMESTAMP,
    training_set_end_ts TIMESTAMP,
    run_id VARCHAR(32),
    last_update_ts TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    last_update_username VARCHAR(128) DEFAULT CURRENT_USER,
    PRIMARY KEY(model_schema_name, model_table_name)
);

DROP TABLE IF EXISTS FeatureStore.deployment_history;
CREATE TABLE FeatureStore.deployment_history
(
    model_schema_name VARCHAR(128),
    model_table_name VARCHAR(128),
    asof_ts TIMESTAMP,
    training_set_id INTEGER,
    training_set_start_ts TIMESTAMP,
    training_set_end_ts TIMESTAMP,
    run_id VARCHAR(32),
    last_update_ts TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    last_update_username VARCHAR(128) DEFAULT CURRENT_USER,
    PRIMARY KEY(model_schema_name, model_table_name, asof_ts)
);


-- trigger keeps deployment_history updated
CREATE TRIGGER FeatureStore.deployment_historian
AFTER UPDATE ON FeatureStore.deployment
REFERENCING OLD AS od
FOR EACH ROW
    INSERT INTO deployment_history ( model_schema_name, model_table_name, asof_ts, training_set_id, training_set_start_ts, training_set_end_ts, run_id, last_update_ts, last_update_username)
    VALUES ( od.model_schema_name, od.model_table_name, CURRENT_TIMESTAMP, od.training_set_id, od.training_set_start_ts, od.training_set_end_ts, od.run_id, od.last_update_ts, od.last_update_username)
;



DROP TABLE IF EXISTS FeatureStore.deployment_feature_stats;
CREATE TABLE FeatureStore.deployment_feature_stats
(
    model_schema_name VARCHAR(128),
    model_table_name VARCHAR(128),
    feature_id INTEGER,
    model_start_ts TIMESTAMP,
    model_end_ts TIMESTAMP,
    feature_cardinality INTEGER,
    feature_histogram CLOB,
    feature_mean DOUBLE,
    feature_median DOUBLE,
    feature_count INTEGER,
    feature_stddev DOUBLE,
    last_update_ts TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    last_update_username VARCHAR(128) DEFAULT CURRENT_USER,
    PRIMARY KEY(model_schema_name, model_table_name, feature_id, model_start_ts, model_end_ts)
);

